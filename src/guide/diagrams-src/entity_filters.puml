@startuml

left to right direction

struct TriggerFilter {
    type EventType = TriggerEvent
    type EventFilter = TriggerEventFilter
}

enum TriggerEventFilter {
    ByCreated
    ByDeleted
    ByExtended
    ByShortened
}

enum TriggerEvent {
    Created(TriggerId)
    Deleted(TriggerId)
    Extended(TriggerNumberOfExecutionsChanged)
    Shortened(TriggerNumberOfExecutionsChanged)
}

struct TriggerNumberOfExecutionsChanged {
    trigger_id: TriggerId
    by: u32
}

TriggerFilter .. TriggerEvent
TriggerEvent .. TriggerNumberOfExecutionsChanged
TriggerFilter .. TriggerEventFilter


struct RoleFilter {
    type EventType = RoleEvent
    type EventFilter = RoleEventFilter
}   

enum RoleEventFilter {
    ByCreated
    ByDeleted
}

enum RoleEvent {
    Created(RoleId)
    Deleted(RoleId)
    PermissionRemoved(PermissionRemoved)
}

struct PermissionRemoved {
    role_id: RoleId
    permission_definition_id: <PermissionTokenDefinition as Identifiable>::Id
}

RoleFilter .. RoleEvent
RoleEvent .. PermissionRemoved
RoleFilter .. RoleEventFilter 


struct PeerFilter {
    type EventType = PeerEvent
    type EventFilter = PeerEventFilter
}

enum PeerEventFilter {
    ByAdded
    ByRemoved
}

enum PeerEvent {
    Added(PeerId)
    Removed(PeerId)
}

PeerFilter .. PeerEvent
PeerFilter .. PeerEventFilter




struct AssetDefinitionFilter {
    type EventType = AssetDefinitionEvent
    type EventFilter = AssetDefinitionEventFilter
}

enum AssetDefinitionEventFilter {
    ByCreated
    ByDeleted
    ByMintabilityChanged
    ByMetadataInserted
    ByMetadataRemoved
}

enum AssetDefinitionEvent {
    Created(AssetDefinitionId)
    MintabilityChanged(AssetDefinitionId)
    Deleted(AssetDefinitionId)
    MetadataInserted(AssetDefinitionMetadataChanged)
    MetadataRemoved(AssetDefinitionMetadataChanged)
}

struct AssetDefinitionMetadataChanged {
    target_id: AssetDefinitionId
    key: Name
    value: Box<Value>
}

AssetDefinitionFilter .. AssetDefinitionEvent
AssetDefinitionEvent .. AssetDefinitionMetadataChanged
AssetDefinitionFilter .. AssetDefinitionEventFilter



struct AssetFilter {
    type EventType = AssetEvent
    type EventFilter = AssetEventFilter
}

enum AssetEventFilter {
    ByCreated
    ByDeleted
    ByAdded
    ByRemoved
    ByMetadataInserted
    ByMetadataRemoved
}

enum AssetEvent {
    Created(AssetId)
    Deleted(AssetId)
    Added(AssetChanged)
    Removed(AssetChanged)
    MetadataInserted(AssetMetadataChanged)
    MetadataRemoved(AssetMetadataChanged)
}

struct AssetChanged {
    asset_id: AssetId
    amount: AssetValue
}

struct AssetMetadataChanged {
    target_id: AssetId
    key: Name
    value: Box<Value>
}

AssetFilter .. AssetEvent
AssetEvent .. AssetChanged
AssetEvent .. AssetMetadataChanged
AssetFilter .. AssetEventFilter



struct DomainFilter {
    type EventType = DomainEvent
    type EventFilter = DomainEventFilter
}

enum DomainEventFilter {
    ByAccount(FilterOpt<AccountFilter>)
    ByAssetDefinition(FilterOpt<AssetDefinitionFilter>)
    ByCreated
    ByDeleted
    ByMetadataInserted
    ByMetadataRemoved
}

enum DomainEvent {
    Account(AccountEvent)
    AssetDefinition(AssetDefinitionEvent)
    Created(DomainId)
    Deleted(DomainId)
    MetadataInserted(DomainMetadataChanged)
    MetadataRemoved(DomainMetadataChanged)
}

struct DomainMetadataChanged {
    target_id: DomainId
    key: Name
    value: Box<Value>
}

DomainFilter .. DomainEvent
DomainEvent .. DomainMetadataChanged
DomainFilter .. DomainEventFilter


struct AccountFilter {
    type EventType = AccountEvent
    type EventFilter = AccountEventFilter
}

enum AccountEventFilter {
    ByAsset(FilterOpt<AssetFilter>)
    ByCreated
    ByDeleted
    ByAuthenticationAdded
    ByAuthenticationRemoved
    ByPermissionAdded
    ByPermissionRemoved
    ByRoleRevoked
    ByRoleGranted
    ByMetadataInserted
    ByMetadataRemoved
}

enum AccountEvent {
    Asset(AssetEvent)
    Created(AccountId)
    Deleted(AccountId)
    AuthenticationAdded(AccountId)
    AuthenticationRemoved(AccountId)
    PermissionAdded(AccountPermissionChanged)
    PermissionRemoved(AccountPermissionChanged)
    RoleRevoked(AccountRoleChanged)
    RoleGranted(AccountRoleChanged)
    MetadataInserted(AccountMetadataChanged)
    MetadataRemoved(AccountMetadataChanged)
}

struct AccountPermissionChanged {
    account_id: AccountId
    permission_id: PermissionTokenId
}

struct AccountRoleChanged {
    account_id: AccountId
    role_id: RoleId
}

struct AccountMetadataChanged {
    target_id: AccountId
    key: Name
    value: Box<Value>
}

AccountFilter .. AccountEvent
AccountEvent .. AccountPermissionChanged
AccountEvent .. AccountRoleChanged
AccountEvent .. AccountMetadataChanged
AccountFilter .. AccountEventFilter

@enduml
